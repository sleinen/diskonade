#!/usr/bin/perl -w
##
## Extract useful information about disks.
##
## In particular, broken disks.

use strict;
use warnings;
use Sys::Hostname;

my $debug = 0;

## This can be disabled, e.g. for testing, because it is slow.
##
my $collect_chassis_serial_number = 1;

my $ticket_email_address = '<SUPER-SECRET-TICKET-SYSTEM-ADDRESS@EXAMPLE.COM>';

my $ticket_base_url = 'https://ticket.switch.ch/rt/';

my $warn_about_unknown_kernel_log_entries = 0;

## How many days in the past we consider relevant for log entries
##
my $days_back = 10;

### relevant_historic_filenames BASENAME, DAYS_BACK
###
### Returns an ordered (by increasing last-modified time) list of
### archived log files based on BASENAME, reaching DAYS_BACK days back
### in time.
###
### For example, if BASENAME is /var/log/foo, and DAYS_BACK is 3, and
### the current time is Sun Feb 14 16:23:31 CET 2016, and /var/log
### contains the following files:
###
### : leinen@zhdk0019.zhdk.cloud[diskonade]; ls -l /var/log/foo*
### -rw-r----- 1 syslog adm 827006 Feb 14 16:20 /var/log/foo
### -rw-r----- 1 syslog adm  69559 Feb 14 06:48 /var/log/foo.1
### -rw-r----- 1 syslog adm   5496 Feb 13 06:40 /var/log/foo.2.gz
### -rw-r----- 1 syslog adm   5722 Feb 12 06:48 /var/log/foo.3.gz
### -rw-r----- 1 syslog adm   5896 Feb 11 06:52 /var/log/foo.4.gz
### -rw-r----- 1 syslog adm   5958 Feb 10 06:32 /var/log/foo.5.gz
###
### Then the function will return
### ['/var/log/foo.3.gz', '/var/log/foo.2.gz', '/var/log/foo.1', '/var/log/foo']
###
### The files /var/log/foo.4.gz and older will be excluded, because
### based on their last-modified times, they cannot contain any
### entries less than DAYS_BACK days old.
###
sub relevant_historic_filenames($$) {
    my ($basename, $days_back) = @_;
    my %files_by_age = ();
    foreach my $entry (<$basename*>) {
	my $age = -M $entry;
	next if $age > $days_back;
	warn "overwriting same-age file"
	    if exists $files_by_age{$age};
	$files_by_age{$age} = $entry;
    }
    return map { $files_by_age{$_} } sort { $b <=> $a } keys %files_by_age;
}

### maybe_decompress FILENAME
###
### Return a string that can be used with open() to read the file even
### when it is compressed, by turning it into a "pipe" with the
### necessary decompression command if necessary.
###
sub maybe_decompress($ ) {
    my ($filename) = @_;
    return "gzip -dc $filename|" if $filename =~ /\.gz$/;
    return "zcat $filename|" if $filename =~ /\.Z$/;
    return $filename;
}

sub trawl_logs_for_disk_errors() {
    my $errors = {};

    for my $logfile (relevant_historic_filenames('/var/log/kern.log', $days_back)) {
	grep_logs_for_disk_errors($errors, maybe_decompress($logfile));
    }
    return $errors;
}

sub grep_logs_for_disk_errors($$) {

    ##
    ## We're interested in lines like this in /var/log/kern.log etc.:
    ##
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390807] mpt2sas1: log_info(0x31080000): originator(PL), code(0x08), sub_code(0x0000)
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390831] sd 8:0:1:0: [sdh]
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390853] Result: hostbyte=DID_OK driverbyte=DRIVER_SENSE
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390855] sd 8:0:1:0: [sdh]
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390857] Sense Key : Medium Error [current] [descriptor]
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390860] Descriptor sense data with sense descriptors (in hex):
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390861]         72 03 11 00 00 00 00 0c 00 0a 80 00 00 00 00 01
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390881]         7a b7 b7 88
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390883] sd 8:0:1:0: [sdh]
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390886] Add. Sense: Unrecovered read error
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390888] sd 8:0:1:0: [sdh] CDB:
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390889] Read(16): 88 00 00 00 00 01 7a b7 b7 88 00 00 00 08 00 00
    ## Dec 31 08:13:50 zhdk0030 kernel: [15074410.390896] end_request: critical medium error, dev sdh, sector 6353827720
    ##
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140899] mpt2sas0: log_info(0x31080000): originator(PL), code(0x08), sub_code(0x0000)
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140943] sd 0:0:2:0: [sde]
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140947] Result: hostbyte=DID_OK driverbyte=DRIVER_SENSE
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140948] sd 0:0:2:0: [sde]
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140950] Sense Key : Medium Error [current]
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140955] Info fld=0x793209f8
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140956] sd 0:0:2:0: [sde]
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140958] Add. Sense: Unrecovered read error
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140960] sd 0:0:2:0: [sde] CDB:
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140961] Read(16): 88 00 00 00 00 00 79 32 09 f8 00 00 01 00 00 00
    ## Jan  3 13:55:38 zhdk0020 kernel: [15356268.140968] end_request: critical medium error, dev sde, sector 2033322488
    ##
    my(@m);
    my($disk, $datetime, $host, $tstamp, $rest);
    my($sas_index, $log_info, $code, $sub_code);
    my($target, $devname);
    my($devname_b, $error_type, $badseq, $index, $badlb, $info_fld);
    my($errors, $file) = @_;

    sub note_disk_error($$$$$ ) {
	my ($errors, $host, $devname, $target, $error) = @_;
	my $disk = exists($errors->{devname})
	    ? $errors->{devname}
	: ($errors->{devname} = { 'device' => $devname,
				      'target' => $target,
				      'errors' => [],
	   });
	$disk->{host} = $host unless exists $disk->{host};
	push @{$disk->{errors}}, $error;
	return $disk;
    }

    sub save_log_buffer($$) {
	my ($disk, $lines) = @_;
	$disk->{kern_log} = [] unless exists $disk->{kern_log};
	push @{$disk->{kern_log}}, @{$lines};
	@{$lines} = ();
    }

    open (FILE, $file)
	or die "Cannot open log file $file: $!";
    my @log_buffer = ();
    while (<FILE>) {
	##
	## Parse and strip line header, e.g.
	##
	## "Jan  3 13:55:38 zhdk0020 kernel: [15356268.140899] "
	##
	if (@m
	    = /^([A-Z][a-z][a-z] [ 0-9]\d \d\d:\d\d:\d\d) (.*) kernel: \[ *(\d+\.\d+)\] (.*)$/) {
	    ($datetime, $host, $tstamp, $rest) = @m;
	} else {
	    warn "Unexpected line: $_"
		if $warn_about_unknown_kernel_log_entries;
	    next;
	}

	if (@m = ($rest =~ /^mpt2sas(?:_cm)?(\d+): log_info\(0x([0-9a-f]+)\): originator\(PL\), code\(0x([0-9a-f]+)\), sub_code\(0x([0-9a-f]+)\)/)) {
	    ($sas_index, $log_info, $code, $sub_code) = @m;
	    push @log_buffer, $_;
	} elsif (@m = ($rest =~ /^sd ([0-9:]+): \[(sd.*)\](?: tag#\d+) (.*)/)) {
	    ($target, $devname) = @m;
	    # warn "Target $target Devname $devname\n";
	    push @log_buffer, $_;
	} elsif ($rest =~ /^Sense Key : Medium Error \[current\](?: \[descriptor\])?\s*$/) {
	    push @log_buffer, $_;
	} elsif ($rest =~ /^Result: hostbyte=(DID_OK|DID_SOFT_ERROR) driverbyte=(DRIVER_SENSE|DRIVER_OK)$/) {
	    push @log_buffer, $_;
	} elsif ($rest =~ /^Add\. Sense: Unrecovered read error$/) {
	    push @log_buffer, $_;
	} elsif ($rest =~ /^Descriptor sense data with sense descriptors \(in hex\):$/) {
	    push @log_buffer, $_;
	} elsif ($rest =~ /^        ([0-9a-f][0-9a-f] )+$/) {
	    ##
	    ## Lines with hex bytes and nothing else.
	    ##
	    ## We buffer them unconditionally.  It would be better to
	    ## only do so when they are preceded by (each other or)
	    ## specific lines.
	    ##
	    push @log_buffer, $_;
	} elsif (@m = ($rest =~ /^Info fld=0x([0-9a-f]+)$/)) {
	    ($info_fld) = @m;
	    push @log_buffer, $_;
	} elsif (@m = ($rest =~ /^Read\((\d+)\): ([0-9a-f ]+)$/)) {
	    push @log_buffer, $_;
	} elsif (@m = ($rest =~ /Buffer I\/O error on device (sd[a-z]+)(\d*), logical block (\d+)/)) {
	    ($devname_b, $index, $badlb) = @m;
	    if (defined($devname)) {
		die "Expected device $devname, saw $devname_b" unless $devname eq $devname_b;
	    } else {
		$devname = $devname_b;
	    }
	    push @log_buffer, $_;
	    $disk = note_disk_error($errors, $host, $devname, $target,
				       {
					   'index' => $index,
					       'badlb' => $badlb,
					       'sas_index' => $sas_index,
				       });
	    save_log_buffer($disk, \@log_buffer);
	} elsif (@m = ($rest =~ /^(?:[a-z0-9_]+): (critical medium error|I\/O error), dev (.*), sector (\d+)$/)) {
	    ($error_type, $devname_b, $badseq) = @m;
	    if (defined($devname)) {
		die "Expected device $devname, saw $devname_b" unless $devname eq $devname_b;
	    } else {
		$devname = $devname_b;
	    }
	    push @log_buffer, $_;
	    $disk = note_disk_error($errors, $host, $devname, $target,
				       {
					   'datetime' => $datetime,
					       'error_type' => $error_type,
					       'badseq' => $badseq,
					       'sas_index' => $sas_index,
				       });
	    save_log_buffer($disk, \@log_buffer);
	} elsif ($rest =~ /^IN=/) {
	} elsif ($rest =~ /^ sd.:/) {
	} elsif ($rest =~ /^XFS \(sd..\): /) {
	} else {
	    ##
	    ## The idea is to make these disappear by understanding all log lines...
	    ##
	    warn "Ungrokkable kernel log line: $_"
		if $warn_about_unknown_kernel_log_entries;
	}
	1;
    }
    if (@log_buffer and defined $disk) {
	save_log_buffer($disk, \@log_buffer);
    }
    close FILE or die "Error closing log file $file: $!";
    return undef unless $errors;
    return $errors;
}

sub print_error($$) {
    my ($disk, $error) = @_;
    my $prefix = '    ';
    print $prefix;
    printf ("%s ", $error->{datetime});
    if (exists $error->{badseq}) {
	printf STDOUT ("critical medium error, sector: %d\n",
		       $error->{badseq});
    } else {
	printf STDOUT ("error:");
	foreach my $key (sort keys %{$error}) {
	    printf STDOUT (" %s: %s", $key, $error->{$key});
	}
	printf STDOUT ("\n");
    }
}

sub print_disk($ ) {
    my ($disk) = @_;
    printf STDOUT ("Disk /dev/%s:\n", $disk->{device});
    printf STDOUT ("  WWN:     %s\n", $disk->{wwn});
    printf STDOUT ("  serial:  %s\n", $disk->{serno});
    printf STDOUT ("  target:  %s\n", $disk->{target});
    printf STDOUT ("  symlink: %s\n", $disk->{symlink})
	if exists $disk->{symlink};
    printf STDOUT ("  reported_uncorrectable: %d\n", $disk->{reported_uncorrectable})
	if exists $disk->{reallocated_sector_ct};
    printf STDOUT ("  reallocated_sector_ct:  %d\n", $disk->{reallocated_sector_ct})
	if exists $disk->{reallocated_sector_ct};
    if (exists $disk->{errors}) {
	printf STDOUT ("\n");
	printf STDOUT ("  Errors:\n");
	foreach my $error (@{$disk->{errors}}) {
	    print_error ($disk, $error);
	}
    }
}

sub collect_disk_mount_information($ ) {
    my ($disk) = @_;
    my $dev = '/dev/'.$disk->{device};
    my (@m, %mountpoint);
    open MTAB, "/etc/mtab"
	or die "Cannot open /etc/mtab: $!";
    while (<MTAB>) {
	unless (@m = /^((\/[^ ]+)\d+) (\/\S+) (\S+) (\S+)/) {
	    next;
	}
	my ($path, $base, $mountpoint, $fstype, $flags) = @m;
	next unless $2 eq $dev;
	$mountpoint{$mountpoint} = { 'fstype' => $fstype,
					 'flags' => $flags,
					 'path' => $path,
	};
    }
    close MTAB or die "Error closing /etc/mtab: $!";
    $disk->{mountpoints} = \%mountpoint;
}

sub collect_disk_information_using_hdparm($ ) {
    my ($disk) = @_;
    my $dev = '/dev/'.$disk->{device};
    return undef unless -e $dev;
    open PIPE, "sudo hdparm -I ".$dev."|"
	or die "Cannot run hdparm -I $dev: $!";
    while (<PIPE>) {
	my (@m);
	if (@m = /^\s+Model Number:\s+(.*)$/) {
	    ($disk->{model}) = @m;
	} elsif (@m = /^\s+Serial Number:\s+(.*)$/) {
	    ($disk->{serno}) = @m;
	} elsif (@m = /^Logical Unit WWN Device Identifier:\s+(.*)$/) {
	    ($disk->{wwn}) = @m;
	} else {
	    warn "Ignoring hdparm output: $_"
		if $debug;
	}
    }
    close PIPE
	or die "Error from sudo hdparm -I $dev: $!";
}

sub collect_disk_information_using_smartctl($ ) {
    my ($disk) = @_;
    my $dev = '/dev/'.$disk->{device};
    return undef unless -e $dev;
    open PIPE, "sudo smartctl -x ".$dev."|"
	or die "Cannot run smartctl -x $dev: $!";
    while (<PIPE>) {
	my (@m);
	if (@m = /^\s+Device Model:\s+(.*)$/) {
	    ($disk->{model}) = @m;
	} elsif (@m = /^Serial Number:\s+(.*)$/) {
	    ($disk->{serno}) = @m;
	} elsif (@m = /^LU WWN Device Id:\s+(.*)$/) {
	    ($disk->{wwn}) = @m;
	    $disk->{wwn} =~ s/ //g; # drop the blanks
	} elsif (@m = /^  4  0x008  4\s+(\d+)  Number of Reported Uncorrectable Errors$/) {
	    ($disk->{reported_uncorrectable}) = @m;
	} elsif (@m = /^  5 Reallocated_Sector_Ct\s+0x0033\s+(\d+)\s+(\d+)\s+(\d+)\s+Pre-fail\s+Always\s+-\s+(\d+)$/) {
	    ($disk->{reallocated_sector_ct}) = $m[3];
	} else {
	    warn "Ignoring smartctl output: $_"
		if $debug;
	}
    }
    if (! close PIPE) {
	if ($! == 0) {
	    my ($retcode, $signo) = ($? >> 8, $? & 127);
	    ##
	    ## From https://www.smartmontools.org/browser/trunk/smartmontools/smartctl.8.in:
	    ##
	    if ($retcode & (1 << 0)) {
		warn "smartctl -x $dev: Command line did not parse.\n";
	    }
	    if ($retcode & (1 << 1)) {
		warn "smartctl -x $dev: Could not open device.\n";
	    }
	    if ($retcode & (1 << 2)) {
		warn "smartctl -x $dev: SMART error\n";
	    }
	    if ($retcode & (1 << 3)) {
		$disk->{smart_disk_failing} = 1;
	    }
	    if ($retcode & (1 << 4)) {
		$disk->{smart_prefail_below_threshold} = 1;
	    }
	    if ($retcode & (1 << 5)) {
		$disk->{smart_ok_but_below_threshold} = 1;
	    }
	    if ($retcode & (1 << 6)) {
		$disk->{smart_error_records_found} = 1;
	    }
	    if ($retcode & (1 << 7)) {
		$disk->{smart_selftest_errors_found} = 1;
	    }
	    if ($signo != 0) {
		warn "smartctl -x: signal $signo\n";
	    }
	} else {
	    warn "Error from sudo smartctl -x $dev: $!";
	}
    }
}

sub collect_disk_location_information_using_sas2ircu($ ) {
    my ($disk) = @_;
    my %controller = ();

    unless (open PIPE, "sudo sas2ircu list|") {
	warn "Cannot run sas2ircu list: $!";
	return undef;
    }
    while (<PIPE>) {
	my (@m);
	if (@m = /^\s+(\d+)\s+(\S+)\s+([0-9a-f]+)h\s+([0-9a-f]+)h\s+([0-9a-f]+)h:([0-9a-f]+)h:([0-9a-f]+)h:([0-9a-f]+)h\s+([0-9a-f]+)h\s+([0-9a-f]+)h\s*$/) {
	    my ($idx, $type) = @m;
	    $controller{$idx} = {
		index => $idx,
		type => $type,
	    };
	} else {
	    # warn "Cannot parse line:\n$_\n";
	}
    }
    unless (close PIPE) {
	warn "Error from sudo sas2ircu list: $!";
    }
    foreach my $idx (sort keys %controller) {
	my ($type);
	my %attrval = ();
	$type = $controller{$idx}->{type};
	open PIPE, "sudo sas2ircu $idx display|"
	    or die "Cannot run sas2ircu $idx display: $!";
	while (<PIPE>) {
	    my (@m);
	    # Enclosure #                             : 1
	    # Slot #                                  : 0
	    # SAS Address                             : 4433221-1-0000-0000
	    # State                                   : Ready (RDY)
	    # Size (in MB)/(in sectors)               : 3815447/7814037167
	    # Manufacturer                            : ATA
	    # Model Number                            : WDC WD4000F9YZ-0
	    # Firmware Revision                       : 1A01
	    # Serial No                               : WDWCC131695593
	    # GUID                                    : 50014ee2b478ab80
	    # Protocol                                : SATA
	    # Drive Type                              : SATA_HDD
	    if (@m = /^  (Enclosure #|Slot #|SAS Address|State|Size \(in MB\)\/\(in sectors\)|Manufacturer|Model Number|Firmware Revision|Serial No|GUID|Protocol|Drive Type)\s*: (.*)$/) {
		my ($attr, $val) = @m;
		$attrval{$attr} = $val;
	    } elsif (/^$/ or /^----/) {
		if (exists $attrval{'Enclosure #'}
		    and exists $attrval{'Slot #'}) {
		    my ($enc, $slot);
		    $enc = $attrval{'Enclosure #'};
		    $slot = $attrval{'Slot #'};
		    # $controller{$idx}->{disk} = {}
		    # unless exists $controller{$idx}->{disk};
		    my %attrcopy = %attrval;
		    $controller{$idx}->{disk}->{$enc,$slot} = \%attrcopy;
		} else {
		    # warn "Missing Enclosure/Slot #";
		}
		%attrval = ();
	    } else {
		# warn "Cannot parse line:\n$_\n";
	    }
	}
	close PIPE
	    or warn "Error from sudo sas2ircu $idx display: $!";
    }
    foreach my $index (sort keys %controller) {
	my $controller = $controller{$index};
	foreach my $encslot (sort keys %{$controller->{disk}}) {
	    my ($enc, $slot) = split($;,$encslot);
	    my $d = $controller->{disk}->{$encslot};
	    if ($d->{GUID} eq $disk->{wwn}) {
		$disk->{controller_index} = $index;
		$disk->{enclosure_index} = $enc;
		$disk->{enclosure_slot} = $slot;
	    }
	}
    }
}

sub check_udev_rules($$) {
    my ($disk, $rules_file) = @_;
    my (@m);
    return undef unless exists $disk->{wwn};
    open FILE, "$rules_file"
	or die "Cannot open udev rules $rules_file: $!";
    while (<FILE>) {
	if (@m = /ENV\{ID_WWN_WITH_EXTENSION\}=="0x([0-9a-f]+)"/) {
	    my ($this_wwn) = @m;
	    if ($disk->{wwn} eq $this_wwn) {
		if (@m = /,\s*SYMLINK\+="([^%]+)(?:%n)?"/) {
		    ($disk->{symlink}) = @m;
		}
	    } else {
	    }
	} else {
	    # warn "HUH?: $_";
	}
    }
    close FILE
	or die "Error closing udev rules file $rules_file: $!";
}

### find_in_path CMD [, PATH]
###
### Look for CMD in PATH, and return the full pathname if found.
###
### PATH should be a string containing a colon-separated list of
### directories.  If CMD is found in any of the directories, the full
### pathname of the first match will be returned.  Otherwise the
### result will be undef(ined).
###
sub find_in_path($@) {
    my ($cmd, $path) = @_;
    $path = $ENV{'PATH'} unless defined $path;
    foreach my $dir (split(':', $path)) {
	my $full_pathname = $dir.'/'.$cmd;
	return $full_pathname
	    if -x $full_pathname;
    }
    return undef;
}

sub get_chassis_serial_number() {
    my (@m);
    my ($chassis_serial);
    if (find_in_path ('ipmi-fru')) {
	open PIPE, "sudo ipmi-fru|"
	    or die "Cannot run ipmi-fru: $!";
	while (<PIPE>) {
	    if (@m = /^\s*FRU Chassis Serial Number: (.*)$/) {
		($chassis_serial) = @m;
	    }
	    warn "IPMI-FRU: $_"
		if $debug;
	}
	close PIPE
	    or die "Error from ipmi-fru: $!";
    } elsif (find_in_path ('ipmitool')) {
	open PIPE, "sudo ipmitool fru|"
	    or die "Cannot run ipmitool fru: $!";
	while (<PIPE>) {
	    if (@m = /^\s*Chassis Serial\s*: (.*)$/) {
		($chassis_serial) = @m;
	    }
	    warn "IPMITOOL FRU: $_"
		if $debug;
	}
	close PIPE
	    or die "Error from ipmitool fru: $!";
    } else {
	warn "Could not obtain chassis serial number.\n"
	    ."Either ipmi-fru (from freeipmi) or ipmitool should be installed.\n";
	return undef;
    }
    return $chassis_serial;
}

sub ticket_url($ ) {
    my ($no) = @_;
    return $ticket_base_url."Ticket/Display.html?id="
	.(defined($no) ? $no : 'XXX');
}

sub first_error_datettime($ ) {
    my ($disk) = @_;
    return $disk->{errors}[0]->{datetime};
}

sub suggest_ticket_mail($$) {
    my ($disk, $chassis_serial) = @_;
    print STDOUT "Create a ticket by sending a mail along these lines:\n\n";
    printf STDOUT "------------------------------ SNIP ------------------------------\n";
    printf STDOUT ("To: %s\n", $ticket_email_address);
    printf STDOUT ("Subject: %s %s (%s) disk errors\n\n",
		   $disk->{host}, $disk->{serno}, $disk->{device});
    printf STDOUT ("Server serial number:  %s\n",
		   defined $chassis_serial ? $chassis_serial : '<UNKNOWN>');
    printf STDOUT ("Disk serial number:    %s\n", $disk->{serno});
    printf STDOUT ("Known as:              /dev/%s\n", $disk->{symlink})
	if exists $disk->{symlink};
    printf STDOUT ("WWN:                   %s\n", $disk->{wwn});
    printf STDOUT ("Target:                %s\n", $disk->{target});
    printf STDOUT ("Locator LED:           sudo sas2ircu %s locate %s:%s on/off\n",
		   $disk->{controller_index},
		   $disk->{enclosure_index},
		   $disk->{enclosure_slot})
	if (exists $disk->{controller_index}
	    and exists $disk->{enclosure_index}
	    and exists $disk->{enclosure_slot});

    if (%{$disk->{mountpoints}}) {
        printf STDOUT  "OSD Type:              Filestore\n";
	foreach my $mountpoint (sort keys %{$disk->{mountpoints}}) {
	    printf STDOUT ("Mounted on:            %s (%s)\n",
			   $mountpoint,
			   $disk->{mountpoints}->{$mountpoint}->{path});
	}
    } else {
        printf STDOUT  "OSD Type:              BlueStore\n";
        printf STDOUT ("OSD Number:            %s\n", $disk->{osd});
    }

    if (exists $disk->{kern_log}) {
	printf STDOUT ("\n");
	printf ("From /var/log/kern.log:\n\n");

	my $line_limit = 30;
	if ($#{$disk->{kern_log}} > $line_limit) {
	    for (my $i = 0; $i < $line_limit; $i++) {
		print STDOUT ("  ", $disk->{kern_log}->[$i]);
	    }
	    printf STDOUT ("...%d lines omitted\n", $#{$disk->{kern_log}} - $line_limit);
	} else {
	    foreach my $line (@{$disk->{kern_log}}) {
		print STDOUT ("  ", $line);
	    }
	}
    }

    if ((exists $disk->{reported_uncorrectable}
	 and $disk->{reported_uncorrectable} > 0)
	or (exists $disk->{reallocated_sector_ct}
	    and $disk->{reallocated_sector_ct} > 0)) {
	printf STDOUT ("\nSMART summary:\n\n");
	if ($disk->{smart_disk_failing}) {
	    printf STDOUT ("  disk failing\n");
	}
	if ($disk->{smart_prefail_below_threshold}) {
	    printf STDOUT ("  prefail attributes <= threshold\n");
	}
	if ($disk->{smart_ok_but_below_threshold}) {
	    printf STDOUT ("  attributes <= threshold\n");
	}
	if ($disk->{smart_error_records_found}) {
	    printf STDOUT ("  error records found\n");
	}
	if ($disk->{smart_selftest_errors_found}) {
	    printf STDOUT ("  errors found in selftest\n");
	}
	printf STDOUT ("  reported_uncorrectable: %d\n", $disk->{reported_uncorrectable})
	    if exists $disk->{reported_uncorrectable};
	printf STDOUT ("  reallocated_sector_ct:  %d\n", $disk->{reallocated_sector_ct})
	    if exists $disk->{reallocated_sector_ct};
    }

    printf STDOUT "------------------------------ SNIP ------------------------------\n\n";
}

sub suggest_trouble_log_entry($ ) {
    my ($disk) = @_;
    my ($ticket_no);

    $ticket_no = 'XXX';
    printf STDOUT ("Now surf to\n\n%s\n\n and write something like:\n\n",
		   "https://wiki.smap.switch.ch/topic/switchcloud/trouble_log?do=edit&rev=");
    printf STDOUT ("====== %s %s %s (%s) disk errors ======\n\n[[%s|#%s]]\n\n",
		   first_error_datettime($disk),
		   $disk->{host},
		   $disk->{serno},
		   $disk->{device},
		   ticket_url($ticket_no), $ticket_no);
}

sub collect_disk_information($ ) {
    my ($disk_errors) = @_;
    if (find_in_path ('smartctl')) {
	collect_disk_information_using_smartctl($disk_errors);
    } else {
	warn "'smartctl' not found.  Please install smartmontools.\n";
	collect_disk_information_using_hdparm($disk_errors);
    }
    collect_disk_location_information_using_sas2ircu($disk_errors);
}

my $errors;

my @devnames = @ARGV;
if ($#devnames >= 0) {
    foreach my $devname (@devnames) {
	my $real_devname = $devname;
	while (-l $real_devname) {
	    $real_devname = readlink($real_devname)
		or die "Cannot read symlink $real_devname: $!";
	}
	if (-e $real_devname) {
	    if (! ($real_devname =~ m@^/dev/(.*)$@)) {
		die "Real device name ($real_devname) should start with /dev";
	    }
	    $devname = $1;
	    $errors->{devname} = {
		'device' => $devname,
		    'errors' => [],
		    'host' => hostname,
	    };
	} else {
	    die "Device $real_devname doesn't exist";
	}
    }
} else {
    $errors = trawl_logs_for_disk_errors();
}
foreach my $disk (sort keys %{$errors}) {
    my $disk_errors = $errors->{$disk};
    my ($chassis_serial);
    collect_disk_information($disk_errors);
    collect_disk_mount_information($disk_errors);
    if (%{$disk_errors->{mountpoints}}) {
        check_udev_rules($disk_errors, '/etc/udev/rules.d/60-persistent-block.rules');
    } else {
        $disk_errors->{osd} = `ceph-bluestore-tool show-label --dev \$(lvs --noheadings --options lv_path,devices | grep /dev/$disk_errors->{device} | awk '{ print \$1 }') | grep whoami | awk -F '"' '{ print \$4 }'`;
    }
    $chassis_serial = get_chassis_serial_number()
	if $collect_chassis_serial_number;
    # print_disk($disk_errors);
    suggest_ticket_mail($disk_errors, $chassis_serial);
    suggest_trouble_log_entry($disk_errors);
}
1;
